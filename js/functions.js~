/*
 KNOWN BUGS:
	1.check if var is not being set to true in certin cases.DONE
	2.make email search not depanded on the @ charecter ( perhaps make name and email search seamlessly ru in the same loop?) DONE
 TO-ADD:
	1.make a page calculator for results of the search.
*/

/*----------------------------------------------------------
 *		      PAGINATION V3			   *
-----------------------------------------------------------*/
//accesing DOM elements
const divPage = document.querySelector('.page');//acces to first tag with page class in it. 
const studentListDOM = document.querySelector(".student-list").children; // acces to list of li containing students
buttonElements = document.querySelectorAll(".pagination li");//access to items under pagination class (buttons) <- returns nothing because its at the top of the file
//adding a all the elements the searched  functionality will need.
function addSearchElements(){
	//adding a new div to hold the elements
	const divSearch = document.createElement('div');
	//adding a class to make it accesable
	divSearch.setAttribute('class', 'student-search');
	//adding a input field
	const input = document.createElement('input');
	//adding a class
	input.setAttribute('placeholder','Search for students...');
	//creating a button
	const button =	document.createElement('button');
	//adding inner html
	button.innerHTML = 'search';
	//adding them all together
	divSearch.appendChild(input);
	divSearch.appendChild(button);
	//adding the element tot he page header
	document.querySelector('.page-header').appendChild(divSearch);
}
//adding the search elements to the page.
addSearchElements();

//makig an arrey for the student names in the same length of the studentListDOM.
function mockOfArrrey(){

	//access to students names tages
	const names = document.querySelectorAll('.student-details h3');
	mockArrey = [];
	//create a mock off of the arrey studentListDOM. with the names of all thee students. in the same length
	for (let i=0; i<names.length;i++){
		mockArrey.push(names[i].innerHTML);
	}
}
mockOfArrrey();
function mockOfArreyEmails(){

	//access to students emails tages
	const emails = document.querySelectorAll('.student-details span');
	//creating an arrey of email addresss
	mockOfArreyEmail = [];
	for (let i=0; i<emails.length;i++){
		mockOfArreyEmail.push(emails[i].innerHTML); 
	}	
}
mockOfArreyEmails();
//search functions
//adding event listener to button next to input field
const searchButtonAccess= document.querySelector('.student-search button').addEventListener('click', (event) =>{
	//try to delete the h1 element that is being created when a failed searchs happens
		try{document.querySelector('.page-header h1').remove();}catch{};
	hideAll();
	//access to the user input 
	const searchTerm = document.querySelector('.student-search input').value;
	//getting length of htmlcollecion
	const length = studentListDOM.length;
	//found is wether or not we found a match	
	found = false;
	//an arrey of index values found
	let indexFound = [];
	//indexSearch adds the index-value of found matches to the foundNames arrey.
	const indexSearch= mockArrey.findIndex(function (element, index){
		//check mockOfArreyEmail for matches with nested find index. then break(return) from the click event			
			const emailSearch = mockOfArreyEmail.findIndex(function (element, index){
			if (element.includes(searchTerm)){
				if (indexFound.includes(mockOfArreyEmail.indexOf(element))){}else{indexFound.push(mockOfArreyEmail.indexOf(element))}
				found = true;
			
			}
		})
			if (element.includes(searchTerm)){
				if (indexFound.includes(mockArrey.indexOf(element))){}else{indexFound.push(mockArrey.indexOf(element))}
				found = true;
		}
	}
	)	
	console.log(indexFound);
	//for number of displayed students / 10 make a page. if less then 1 make 1 page. if next student in arrey is null then stop.
	if (found == false){
		hideAll()
		const failed = document.createElement('h1');
		failed.innerHTML = 'this are not the students you are looking for.. or maybe you just entered the wrong name :P';
		document.querySelector('.page-header').appendChild(failed);	
	
	}else{
		buttonElements = document.querySelectorAll(".pagination li");
		//deleting links from previos results
		for (let page=0;page<buttonElements.length;page++){
			buttonElements[page].remove();
		}
	//get access to a list of stundets with the display style set to list-item
//		const displayed = document.querySelectorAll('[style*="list-item"]');
		
	//for number of indexFound students / 10 make a page. if less then 1 make 1 page. if next student in arrey is null then stop.
		for (let showing=0;showing<indexFound.length/10;showing++){
			//creating an <a> element
			let button = document.createElement("a");
			console.log(button);
			//adding an href attr with the vlaue of $
			button.setAttribute('href', "#");
			//making the inner html of the button = to showing. 
			button.innerHTML = showing + 1;
			//creating a new <li> element 
			let newLi = document.createElement('li')
			//adding the new <a> to the new <li> element
			newLi.appendChild(button);
			//adding the new <li> to the div with the class of pagination
			pagesUl.appendChild(newLi);
			if (studentListDOM.item(showing*10) == null){return};//if there is not enough student for the next apge the STAP!
		}	
		buttonListeners(buttonElements);
	}
	}
);

//console.log(searchButtonAccess);

//make a new elememnt DIV and adding an ul for the pages to held at
function createDiv (){
	//creating a new div
	const newDiv = document.createElement('div');
	//setting its class to pages
	newDiv.setAttribute('class', 'pages');
	//creaing new ul elemeny
	const newUl = document.createElement('ul');
	//ul element has class of pagination
	newUl.setAttribute("class", "pagination");
	//appening the ul to the new div element
	divPage.appendChild(newDiv);
	//selecting all the div element
	const pageDiv = document.querySelector('.pages');	
	//appending the ul to the div.
	pageDiv.appendChild(newUl);
	//making pagesUl a global access for the ul element
	pagesUl = document.querySelector('.pages ul');
}
createDiv();
//hide every element in the student-list selector studentListDOM;
function hideAll (){

	//adding a style to hide all the students from the html
	for (let i=0; i<studentListDOM.length;i++){
	studentListDOM[i].style.display = 'none';//adding a style to hide all the students from the html

	}
}
//creating buttons in the range of studentListDOM/10 then adding another for any leftovers. if the value of the next index is null. will stop.
function buttons(){

	for (let index=0;index<=studentListDOM.length/10;index++){
		//creating an <a> element
		let button = document.createElement("a");
		console.log(button);
		//adding an href attr with the vlaue of $
		button.setAttribute('href', "#");
		//making the inner html of the button = to index. ODO: make it 1 for the first button without interapting the event listener creation
		button.innerHTML = index + 1;
		//creating a new <li> element 
		let newLi = document.createElement('li')
		//adding the new <a> to the new <li> element
		newLi.appendChild(button);
		//adding the new <li> to the div with the class of pagination
		pagesUl.appendChild(newLi);
		buttonElements = document.querySelectorAll(".pagination li");
		if (studentListDOM.item(index*10) == null){return};//if there is not enough student for the next apge the STAP!
		
	}
	console.log(buttonElements);
};
//calling buttons before accesing them, so to use them in the creating of the event listeners.
buttons();
//looping throw all buttons and adding event listeners to them.
function buttonListeners (arreyLi){
	for (let buttonInstence=0;buttonInstence<arreyLi.length;buttonInstence++){

	//the event will make the approprirate students apper and hide all outher students.
		arreyLi.item(buttonInstence).addEventListener('click', (event) =>{

			let button = event.target;//set the button variable to target
			hideAll();//hides all the student elements
			makeActive();
			//will add a class attribue with the value of active.
			button.setAttribute('class','active');
			let startCount = button.innerHTML -1;
			//if event index is not smaller then the starting index value plus 10. continue enabling student LI
			for (let eventIndex=(parseInt(startCount))*10; eventIndex<((parseInt(startCount)+1)*10);eventIndex++){
				if (studentListDOM.item(eventIndex) === null){break};
				studentListDOM.item(eventIndex).style.display='list-item';
				}
		})
	}
}
buttonListeners (buttonElements);
//will remove all active classes from the buttons
function makeActive(){
	const buttonsList = document.querySelectorAll('[href="#"]');
	for (let i=0;i<buttonsList.length;i++){
		buttonsList.item(i).removeAttribute('class');
	}
}
//initial load of page, hiding every student on the page then showing the first 10
function hideAndAppened() {
	hideAll();
	//default page is the first. so we display the first 10 students
	for (let i=0;i<10;i++){
		if (studentListDOM.item(i) ==null){return};//if end of students then stop trying to display them
		studentListDOM.item(i).style.display ="list-item";
	
	}
};

hideAndAppened();
	
